{"ast":null,"code":"var _s = $RefreshSig$();\nfunction findIdPassword() {\n  _s();\n  const navigate = useNavigate();\n\n  //findIdForm\n  const [findIdForm, setFindIdForm] = useState({\n    memName: '',\n    memEmail: ''\n  });\n\n  //findPasswordForm\n  const [findPasswordForm, setFindPasswordForm] = useState({\n    memId: '',\n    memEmail: ''\n  });\n\n  //message\n  const [message, setMessage] = useState('');\n\n  //handleFindIdChange\n  const handleFindIdChange = e => {\n    setFindIdForm({\n      ...findIdForm,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  //handleFindPasswordChange\n  const handleFindPasswordChange = e => {\n    setFindPasswordForm({\n      ...findPasswordForm,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleFindId = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('/auth/find-id', findIdForm);\n      alert(`아이디: ${response.data}`);\n    } catch (error) {\n      alert('회원정보를 찾지 못했습니다.');\n    }\n  };\n\n  //handleFindPassword - axios.post\n  const handleFindPassword = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('/auth/find-password', findPasswordForm);\n      setMessage('비밀번호 재설정 이메일 발송완료');\n      alert('비밀번호 재설정 이메일 발송완료');\n    } catch (error) {\n      setMessage('요청을 처리하는 동안 오류가 발생했습니다');\n      alert('요청을 처리하는 동안 오류가 발생했습니다');\n    }\n  };\n\n  //====================================================\n  // Tab Menu 중 현재 어떤 Tab이 선택되어 있는지 확인하기 위한 currentTab 상태와 currentTab을 갱신하는 함수가 존재해야 하고, 초기값은 0.\n  const [currentTab, clickTab] = useState(0);\n\n  //탭메뉴\n  let [tab, setTab] = useState(0);\n  const menuArr = [{\n    name: '아이디찾기',\n    content: ''\n  }, {\n    name: '비밀번호 재설정',\n    content: ''\n  } // { name: 'Tab3', content: 'Tab menu THREE' },\n  ];\n\n  //selectMenuHandler\n  const selectMenuHandler = index => {\n    // parameter로 현재 선택한 인덱스 값을 전달해야 하며, 이벤트 객체(event)는 쓰지 않는다\n    // 해당 함수가 실행되면 현재 선택된 Tab Menu 가 갱신.\n    clickTab(index);\n  };\n}\n_s(findIdPassword, \"Ycp/YfrH4WNpcePdTlH5U/4IrHc=\", true);\nexport default findIdPassword;","map":{"version":3,"names":["findIdPassword","_s","navigate","useNavigate","findIdForm","setFindIdForm","useState","memName","memEmail","findPasswordForm","setFindPasswordForm","memId","message","setMessage","handleFindIdChange","e","target","name","value","handleFindPasswordChange","handleFindId","preventDefault","response","axios","post","alert","data","error","handleFindPassword","currentTab","clickTab","tab","setTab","menuArr","content","selectMenuHandler","index"],"sources":["C:/Users/Administrator/frontend_rock/src/pages/Login/FindIdPassword.js"],"sourcesContent":["function findIdPassword() {\r\n    const navigate = useNavigate();\r\n\r\n    //findIdForm\r\n    const [findIdForm, setFindIdForm] = useState({\r\n        memName: '', memEmail: ''\r\n    });\r\n\r\n    //findPasswordForm\r\n    const [findPasswordForm, setFindPasswordForm] = useState({\r\n        memId: '', memEmail: ''\r\n    });\r\n\r\n    //message\r\n    const [message, setMessage] = useState('');\r\n\r\n    //handleFindIdChange\r\n    const handleFindIdChange = (e) => {\r\n        setFindIdForm({...findIdForm, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    //handleFindPasswordChange\r\n    const handleFindPasswordChange = (e) => {\r\n        setFindPasswordForm({...findPasswordForm, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    const handleFindId = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const response = await axios.post('/auth/find-id', findIdForm);\r\n            alert(`아이디: ${response.data}`);\r\n        } catch (error) {\r\n            alert('회원정보를 찾지 못했습니다.');\r\n        }\r\n    };\r\n\r\n    //handleFindPassword - axios.post\r\n    const handleFindPassword = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await axios.post('/auth/find-password', findPasswordForm);\r\n\r\n            setMessage('비밀번호 재설정 이메일 발송완료');\r\n            alert('비밀번호 재설정 이메일 발송완료');\r\n\r\n        } catch (error) {\r\n            setMessage('요청을 처리하는 동안 오류가 발생했습니다');\r\n            alert('요청을 처리하는 동안 오류가 발생했습니다');\r\n        }\r\n    };\r\n\r\n\r\n//====================================================\r\n    // Tab Menu 중 현재 어떤 Tab이 선택되어 있는지 확인하기 위한 currentTab 상태와 currentTab을 갱신하는 함수가 존재해야 하고, 초기값은 0.\r\n    const [currentTab, clickTab] = useState(0);\r\n\r\n\r\n    //탭메뉴\r\n    let [tab, setTab] = useState(0);\r\n\r\n    const menuArr = [{name: '아이디찾기', content: ''}, {\r\n        name: '비밀번호 재설정',\r\n        content: ''\r\n    }, // { name: 'Tab3', content: 'Tab menu THREE' },\r\n    ];\r\n\r\n\r\n//selectMenuHandler\r\n    const selectMenuHandler = (index) => {\r\n        // parameter로 현재 선택한 인덱스 값을 전달해야 하며, 이벤트 객체(event)는 쓰지 않는다\r\n        // 해당 함수가 실행되면 현재 선택된 Tab Menu 가 갱신.\r\n        clickTab(index);\r\n    };\r\n\r\n    \r\n}\r\nexport default findIdPassword;"],"mappings":";AAAA,SAASA,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGC,QAAQ,CAAC;IACzCC,OAAO,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAC3B,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGJ,QAAQ,CAAC;IACrDK,KAAK,EAAE,EAAE;IAAEH,QAAQ,EAAE;EACzB,CAAC,CAAC;;EAEF;EACA,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA,MAAMQ,kBAAkB,GAAIC,CAAC,IAAK;IAC9BV,aAAa,CAAC;MAAC,GAAGD,UAAU;MAAE,CAACW,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAK,CAAC,CAAC;EACnE,CAAC;;EAED;EACA,MAAMC,wBAAwB,GAAIJ,CAAC,IAAK;IACpCL,mBAAmB,CAAC;MAAC,GAAGD,gBAAgB;MAAE,CAACM,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAAK,CAAC,CAAC;EAC/E,CAAC;EAED,MAAME,YAAY,GAAG,MAAOL,CAAC,IAAK;IAC9BA,CAAC,CAACM,cAAc,CAAC,CAAC;IAElB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,eAAe,EAAEpB,UAAU,CAAC;MAC9DqB,KAAK,CAAC,QAAQH,QAAQ,CAACI,IAAI,EAAE,CAAC;IAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZF,KAAK,CAAC,iBAAiB,CAAC;IAC5B;EACJ,CAAC;;EAED;EACA,MAAMG,kBAAkB,GAAG,MAAOb,CAAC,IAAK;IACpCA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,qBAAqB,EAAEf,gBAAgB,CAAC;MAE1EI,UAAU,CAAC,mBAAmB,CAAC;MAC/BY,KAAK,CAAC,mBAAmB,CAAC;IAE9B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZd,UAAU,CAAC,wBAAwB,CAAC;MACpCY,KAAK,CAAC,wBAAwB,CAAC;IACnC;EACJ,CAAC;;EAGL;EACI;EACA,MAAM,CAACI,UAAU,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;;EAG1C;EACA,IAAI,CAACyB,GAAG,EAAEC,MAAM,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC;EAE/B,MAAM2B,OAAO,GAAG,CAAC;IAAChB,IAAI,EAAE,OAAO;IAAEiB,OAAO,EAAE;EAAE,CAAC,EAAE;IAC3CjB,IAAI,EAAE,UAAU;IAChBiB,OAAO,EAAE;EACb,CAAC,CAAE;EAAA,CACF;;EAGL;EACI,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;IACjC;IACA;IACAN,QAAQ,CAACM,KAAK,CAAC;EACnB,CAAC;AAGL;AAACnC,EAAA,CA5EQD,cAAc;AA6EvB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}