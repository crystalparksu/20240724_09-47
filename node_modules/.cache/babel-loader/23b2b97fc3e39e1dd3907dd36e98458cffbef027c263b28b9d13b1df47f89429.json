{"ast":null,"code":"// import React, {useState, useEffect} from 'react';\n// import {useNavigate, useLocation} from \"react-router-dom\";\n// import axios from \"axios\";\n//\n// // css\n// import \"../../common/css/ChangePassword.css\"\n//\n//\n// function ChangePassword() {\n//\n//     const navigate = useNavigate();\n//\n//     const location = useLocation();\n//\n//     const [isResetMode, setIsResetMode] = useState(false);\n//\n//     const [passwords, setPasswords] = useState({\n//         memNewPassword: '', memNewPasswordCheck: ''\n//     });\n//\n//     const [passwordError, setPasswordError] = useState('');\n//\n//     // URL 확인 후 모드 변경\n//     useEffect(() => {\n//         const params = new URLSearchParams(location.search);\n//         const tokenParam = params.get('token');\n//         if (tokenParam) {\n//             setIsResetMode(true);\n//             sessionStorage.setItem('resetToken', tokenParam);\n//             navigate(location.pathname, {replace: true});\n//         }\n//     }, [location, navigate]);\n//\n//     // 비밀번호 유효성 검사 조건\n//     const validatePassword = (password) => {\n//         const minLength = 8;\n//         const hasUpperCase = /[A-Z]/.test(password);\n//         const hasLowerCase = /[a-z]/.test(password);\n//         const hasNumbers = /\\d/.test(password);\n//         const hasNonalphas = /\\W/.test(password);\n//\n//         if (password.length < minLength) {\n//             return '비밀번호는 최소 8자 이상이어야 합니다.';\n//         } else if (!(hasUpperCase && hasLowerCase && hasNumbers && hasNonalphas)) {\n//             return '비밀번호는 대문자, 소문자, 숫자, 특수문자를 모두 포함해야 합니다.';\n//         }\n//         return '';\n//     };\n//\n//     // 필드 값 변경 될 시 호출\n//     const handleChange = (e) => {\n//         const {name, value} = e.target;\n//         setPasswords(prevState => ({\n//             ...prevState, [name]: value\n//         }));\n//         if (name === 'memNewPassword') {\n//             setPasswordError(validatePassword(value));\n//         }\n//     };\n//\n//     // 폼 제출 시 호출\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//\n//         // 비밀번호 검사\n//         if (passwordError) {\n//             alert(passwordError);\n//             return;\n//         }\n//\n//         // 일치 여부 검사\n//         if (passwords.memNewPassword !== passwords.memNewPasswordCheck) {\n//             alert('새 비밀번호와 확인 비밀번호가 일치하지 않습니다.');\n//             return;\n//         }\n//\n//         try {\n//             let response;\n//             const updatePasswordDto = {\n//                 memNewPassword: passwords.memNewPassword, memNewPasswordCheck: passwords.memNewPasswordCheck\n//             };\n//\n//             // 재설정 & 변경 모드 엔드포인트\n//             if (isResetMode) {\n//                 const token = sessionStorage.getItem('resetToken');\n//                 response = await axios.post('/auth/reset-password', updatePasswordDto, {params: {token}});\n//                 sessionStorage.removeItem('resetToken');\n//             } else {\n//                 const accessToken = localStorage.getItem('accessToken');\n//                 response = await axios.put('/auth/update', updatePasswordDto, {\n//                     headers: {'Authorization': `Bearer ${accessToken}`}\n//                 });\n//             }\n//\n//             // 비밀번호 변경시 알림, 이동\n//             if (response.status === 200) {\n//                 alert('비밀번호가 성공적으로 변경되었습니다.');\n//                 navigate(isResetMode ? '/login' : -1);\n//             }\n//         } catch (error) {\n//             console.error('Error changing password:', error);\n//             alert(error.response?.data || '비밀번호를 재설정하는 동안 오류가 발생했습니다');\n//         }\n//     };\n//\n//\n//     return (<>\n//         <div className=\"wrap\">\n//\n//             <div className=\"step-bar\">\n//                 <span className=\"gradation-blue\"></span>\n//             </div>\n//\n//             <div className=\"cp_title\">\n//                 <h2 className=\"cp_title_h2\">{isResetMode ? '비밀번호 재설정' : '비밀번호 변경'}</h2>\n//                 <h5 className=\"cp_title_h5\">새비밀번호를 변경하세요</h5>\n//             </div>\n//\n//\n//             {/*폼*/}\n//\n//\n//             <form className='ChangePasswordForm' onSubmit={handleSubmit}>\n//\n//                 <label className=\"label\">\n//                     <span>*</span> 새 비밀번호\n//                 </label>\n//\n//\n//                 <div className=\"change_password\">\n//                     {/*<div>*/}\n//                     {/*    {isResetMode ? '새 비밀번호:' : '비밀번호 변경:'}*/}\n//                     {/*</div>*/}\n//\n//                     <input\n//                         type=\"password\"\n//                         name=\"memNewPassword\"\n//                         placeholder=\"비밀번호 (영문+숫자+특수문자 8자 이상)\"\n//                         id=\"\"\n//                         className=\"new_password\"\n//                         value={passwords.memNewPassword}\n//                         onChange={handleChange}\n//                         required\n//                     />\n//                 </div>\n//\n//\n//                 {/* 비밀번호 오류 메시지 */}\n//                 {passwordError && <div className=\"error-message\">{passwordError}</div>}\n//\n//\n//                 <label className=\"label\">\n//                     <span>*</span> 새 비밀번호 확인\n//                 </label>\n//\n//                 <div className=\"change_password\">\n//                     <input\n//                         placeholder=\"비밀번호 (영문+숫자+특수문자 8자 이상)\"\n//                         type=\"password\"\n//                         name=\"memNewPasswordCheck\"\n//                         id=\"\"\n//                         className=\"confirm_password\"\n//                         value={passwords.memNewPasswordCheck}\n//                         onChange={handleChange}\n//                         required\n//                     />\n//                 </div>\n//\n//                     <input type=\"submit\"\n//                            className=\"ChangePwBtn\"\n//                            value={isResetMode ? '비밀번호 재설정' : '변경하기'}\n//                            onChange={handleChange}\n//                     />\n//\n//                 {/*회원가입 속 로그인하러 가기*/}\n//                 <div className=\"login_link\">\n//                     이전으로 돌아가기&nbsp;&nbsp;<a href=\"/login\">로그인</a>\n//                 </div>\n//             </form>\n//\n//\n//\n//\n//\n//         </div>\n//\n//\n//         {/* 변경 모드일 때만 돌아가는 버튼있음 */}\n//         {/*{!isResetMode && (<div className=\"return_button\">*/}\n//         {/*        <button className=\"ReturnBtn\"*/}\n//         {/*                onClick={() => navigate(-1)}>돌아가기*/}\n//         {/*        </button>*/}\n//         {/*    </div>)}*/}\n//\n//\n//         </>\n//     );\n// }\n//\n// export default ChangePassword;","map":{"version":3,"names":[],"sources":["C:/Users/Administrator/frontend_rock/src/pages/Login/ChangePassword.js"],"sourcesContent":["// import React, {useState, useEffect} from 'react';\r\n// import {useNavigate, useLocation} from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n//\r\n// // css\r\n// import \"../../common/css/ChangePassword.css\"\r\n//\r\n//\r\n// function ChangePassword() {\r\n//\r\n//     const navigate = useNavigate();\r\n//\r\n//     const location = useLocation();\r\n//\r\n//     const [isResetMode, setIsResetMode] = useState(false);\r\n//\r\n//     const [passwords, setPasswords] = useState({\r\n//         memNewPassword: '', memNewPasswordCheck: ''\r\n//     });\r\n//\r\n//     const [passwordError, setPasswordError] = useState('');\r\n//\r\n//     // URL 확인 후 모드 변경\r\n//     useEffect(() => {\r\n//         const params = new URLSearchParams(location.search);\r\n//         const tokenParam = params.get('token');\r\n//         if (tokenParam) {\r\n//             setIsResetMode(true);\r\n//             sessionStorage.setItem('resetToken', tokenParam);\r\n//             navigate(location.pathname, {replace: true});\r\n//         }\r\n//     }, [location, navigate]);\r\n//\r\n//     // 비밀번호 유효성 검사 조건\r\n//     const validatePassword = (password) => {\r\n//         const minLength = 8;\r\n//         const hasUpperCase = /[A-Z]/.test(password);\r\n//         const hasLowerCase = /[a-z]/.test(password);\r\n//         const hasNumbers = /\\d/.test(password);\r\n//         const hasNonalphas = /\\W/.test(password);\r\n//\r\n//         if (password.length < minLength) {\r\n//             return '비밀번호는 최소 8자 이상이어야 합니다.';\r\n//         } else if (!(hasUpperCase && hasLowerCase && hasNumbers && hasNonalphas)) {\r\n//             return '비밀번호는 대문자, 소문자, 숫자, 특수문자를 모두 포함해야 합니다.';\r\n//         }\r\n//         return '';\r\n//     };\r\n//\r\n//     // 필드 값 변경 될 시 호출\r\n//     const handleChange = (e) => {\r\n//         const {name, value} = e.target;\r\n//         setPasswords(prevState => ({\r\n//             ...prevState, [name]: value\r\n//         }));\r\n//         if (name === 'memNewPassword') {\r\n//             setPasswordError(validatePassword(value));\r\n//         }\r\n//     };\r\n//\r\n//     // 폼 제출 시 호출\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//\r\n//         // 비밀번호 검사\r\n//         if (passwordError) {\r\n//             alert(passwordError);\r\n//             return;\r\n//         }\r\n//\r\n//         // 일치 여부 검사\r\n//         if (passwords.memNewPassword !== passwords.memNewPasswordCheck) {\r\n//             alert('새 비밀번호와 확인 비밀번호가 일치하지 않습니다.');\r\n//             return;\r\n//         }\r\n//\r\n//         try {\r\n//             let response;\r\n//             const updatePasswordDto = {\r\n//                 memNewPassword: passwords.memNewPassword, memNewPasswordCheck: passwords.memNewPasswordCheck\r\n//             };\r\n//\r\n//             // 재설정 & 변경 모드 엔드포인트\r\n//             if (isResetMode) {\r\n//                 const token = sessionStorage.getItem('resetToken');\r\n//                 response = await axios.post('/auth/reset-password', updatePasswordDto, {params: {token}});\r\n//                 sessionStorage.removeItem('resetToken');\r\n//             } else {\r\n//                 const accessToken = localStorage.getItem('accessToken');\r\n//                 response = await axios.put('/auth/update', updatePasswordDto, {\r\n//                     headers: {'Authorization': `Bearer ${accessToken}`}\r\n//                 });\r\n//             }\r\n//\r\n//             // 비밀번호 변경시 알림, 이동\r\n//             if (response.status === 200) {\r\n//                 alert('비밀번호가 성공적으로 변경되었습니다.');\r\n//                 navigate(isResetMode ? '/login' : -1);\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('Error changing password:', error);\r\n//             alert(error.response?.data || '비밀번호를 재설정하는 동안 오류가 발생했습니다');\r\n//         }\r\n//     };\r\n//\r\n//\r\n//     return (<>\r\n//         <div className=\"wrap\">\r\n//\r\n//             <div className=\"step-bar\">\r\n//                 <span className=\"gradation-blue\"></span>\r\n//             </div>\r\n//\r\n//             <div className=\"cp_title\">\r\n//                 <h2 className=\"cp_title_h2\">{isResetMode ? '비밀번호 재설정' : '비밀번호 변경'}</h2>\r\n//                 <h5 className=\"cp_title_h5\">새비밀번호를 변경하세요</h5>\r\n//             </div>\r\n//\r\n//\r\n//             {/*폼*/}\r\n//\r\n//\r\n//             <form className='ChangePasswordForm' onSubmit={handleSubmit}>\r\n//\r\n//                 <label className=\"label\">\r\n//                     <span>*</span> 새 비밀번호\r\n//                 </label>\r\n//\r\n//\r\n//                 <div className=\"change_password\">\r\n//                     {/*<div>*/}\r\n//                     {/*    {isResetMode ? '새 비밀번호:' : '비밀번호 변경:'}*/}\r\n//                     {/*</div>*/}\r\n//\r\n//                     <input\r\n//                         type=\"password\"\r\n//                         name=\"memNewPassword\"\r\n//                         placeholder=\"비밀번호 (영문+숫자+특수문자 8자 이상)\"\r\n//                         id=\"\"\r\n//                         className=\"new_password\"\r\n//                         value={passwords.memNewPassword}\r\n//                         onChange={handleChange}\r\n//                         required\r\n//                     />\r\n//                 </div>\r\n//\r\n//\r\n//                 {/* 비밀번호 오류 메시지 */}\r\n//                 {passwordError && <div className=\"error-message\">{passwordError}</div>}\r\n//\r\n//\r\n//                 <label className=\"label\">\r\n//                     <span>*</span> 새 비밀번호 확인\r\n//                 </label>\r\n//\r\n//                 <div className=\"change_password\">\r\n//                     <input\r\n//                         placeholder=\"비밀번호 (영문+숫자+특수문자 8자 이상)\"\r\n//                         type=\"password\"\r\n//                         name=\"memNewPasswordCheck\"\r\n//                         id=\"\"\r\n//                         className=\"confirm_password\"\r\n//                         value={passwords.memNewPasswordCheck}\r\n//                         onChange={handleChange}\r\n//                         required\r\n//                     />\r\n//                 </div>\r\n//\r\n//                     <input type=\"submit\"\r\n//                            className=\"ChangePwBtn\"\r\n//                            value={isResetMode ? '비밀번호 재설정' : '변경하기'}\r\n//                            onChange={handleChange}\r\n//                     />\r\n//\r\n//                 {/*회원가입 속 로그인하러 가기*/}\r\n//                 <div className=\"login_link\">\r\n//                     이전으로 돌아가기&nbsp;&nbsp;<a href=\"/login\">로그인</a>\r\n//                 </div>\r\n//             </form>\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//         </div>\r\n//\r\n//\r\n//         {/* 변경 모드일 때만 돌아가는 버튼있음 */}\r\n//         {/*{!isResetMode && (<div className=\"return_button\">*/}\r\n//         {/*        <button className=\"ReturnBtn\"*/}\r\n//         {/*                onClick={() => navigate(-1)}>돌아가기*/}\r\n//         {/*        </button>*/}\r\n//         {/*    </div>)}*/}\r\n//\r\n//\r\n//         </>\r\n//     );\r\n// }\r\n//\r\n// export default ChangePassword;"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}