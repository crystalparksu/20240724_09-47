{"ast":null,"code":"import { instance } from \"../../shared/api\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n//전체 무비차트 조회\nexport const getMovies = createAsyncThunk(\"movies/getMovies\", async (_, thunkAPI) => {\n  try {\n    const data = await instance.get(\"/movies\");\n    return data.data.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//영화 상세페이지 조회\nexport const getDetails = createAsyncThunk(\"details/getDetails\", async (payload, thunkAPI) => {\n  try {\n    const data = await instance.get(`/movie/${payload}`); //movie의 id를 파라미터로 보내기\n    return data.data.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//나의 페이지 조회\nexport const getMypage = createAsyncThunk(\"mypage/getMypage\", async (_, thunkAPI) => {\n  try {\n    const data = await instance.get(\"/user/movielog\");\n    return data.data.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//찜하기\nexport const onLikePost = createAsyncThunk(\"like/onLikePost\", async (payload, thunkApI) => {\n  try {\n    const data = await instance.post(`/movie/like/${payload}`);\n    return data.data.data; //는 \"like success\"라는 상태값\n  } catch (error) {\n    return thunkApI.rejectWithValue(error);\n  }\n});\nexport const movies = createSlice({\n  name: \"movies\",\n  //components로 data보내주는 extra 리듀서에 정보를 저장하기 위해 initialState를 만들어줍니다.\n  initialState: {\n    movies: [],\n    detail: {\n      title: \"\",\n      titleEng: \"\",\n      img: \"\",\n      date: \"\",\n      director: \"\",\n      actor: \"\",\n      rate: \"\",\n      genderRate: \"\",\n      genre: \"\",\n      base: \"\",\n      detail: \"\",\n      status: 2\n    },\n    like: [],\n    mylist: [],\n    error: null\n  },\n  reducers: {},\n  extraReducers: {\n    [getMovies.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getMovies.fulfilled]: (state, action) => {\n      // console.log(action);        //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.movies = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.movies);  //리듀서에 state.movies 잘 들어와있나 확인용 useSelector로 끌고가기 위해!\n    },\n    [getMovies.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [getDetails.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getDetails.fulfilled]: (state, action) => {\n      // console.log(action); //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.detail = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.detail);\n    },\n    [getDetails.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [getMypage.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getMypage.fulfilled]: (state, action) => {\n      // console.log(action);        //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.mylist = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.movies);\n    },\n    [getMypage.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [onLikePost.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [onLikePost.fulfilled]: (state, action) => {\n      // console.log(action); //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.like = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.like);\n    },\n    [onLikePost.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\nexport default movies.reducer;","map":{"version":3,"names":["instance","createSlice","createAsyncThunk","getMovies","_","thunkAPI","data","get","error","rejectWithValue","getDetails","payload","getMypage","onLikePost","thunkApI","post","movies","name","initialState","detail","title","titleEng","img","date","director","actor","rate","genderRate","genre","base","status","like","mylist","reducers","extraReducers","pending","state","isLoading","fulfilled","action","rejected","reducer"],"sources":["C:/Users/Administrator/frontend_rock/src/redux/modules/movies.js"],"sourcesContent":["import { instance } from \"../../shared/api\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n//전체 무비차트 조회\nexport const getMovies = createAsyncThunk(\n  \"movies/getMovies\",\n  async (_, thunkAPI) => {\n    try {\n      const data = await instance.get(\"/movies\");\n      return data.data.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//영화 상세페이지 조회\nexport const getDetails = createAsyncThunk(\n  \"details/getDetails\",\n  async (payload, thunkAPI) => {\n    try {\n      const data = await instance.get(`/movie/${payload}`); //movie의 id를 파라미터로 보내기\n      return data.data.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//나의 페이지 조회\nexport const getMypage = createAsyncThunk(\n  \"mypage/getMypage\",\n  async (_, thunkAPI) => {\n    try {\n      const data = await instance.get(\"/user/movielog\");\n\n      return data.data.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//찜하기\nexport const onLikePost = createAsyncThunk(\n  \"like/onLikePost\",\n  async (payload, thunkApI) => {\n    try {\n      const data = await instance.post(`/movie/like/${payload}`);\n\n      return data.data.data; //는 \"like success\"라는 상태값\n    } catch (error) {\n      return thunkApI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const movies = createSlice({\n  name: \"movies\", //components로 data보내주는 extra 리듀서에 정보를 저장하기 위해 initialState를 만들어줍니다.\n  initialState: {\n    movies: [],\n    detail: {\n      title: \"\",\n      titleEng: \"\",\n      img: \"\",\n      date: \"\",\n      director: \"\",\n      actor: \"\",\n      rate: \"\",\n      genderRate: \"\",\n      genre: \"\",\n      base: \"\",\n      detail: \"\",\n      status: 2,\n    },\n    like: [],\n    mylist: [],\n    error: null,\n  },\n  reducers: {},\n\n  extraReducers: {\n    [getMovies.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getMovies.fulfilled]: (state, action) => {\n      // console.log(action);        //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.movies = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.movies);  //리듀서에 state.movies 잘 들어와있나 확인용 useSelector로 끌고가기 위해!\n    },\n    [getMovies.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    [getDetails.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getDetails.fulfilled]: (state, action) => {\n      // console.log(action); //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.detail = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.detail);\n    },\n    [getDetails.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    [getMypage.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getMypage.fulfilled]: (state, action) => {\n      // console.log(action);        //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.mylist = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.movies);\n    },\n    [getMypage.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n\n    [onLikePost.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [onLikePost.fulfilled]: (state, action) => {\n      // console.log(action); //엑스트라 리듀서에 액션이 성공적으로 들어왔는지 확인\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.like = action.payload; // Store에 있는 movies에 서버에서 가져온 movies를 넣습니다.\n      // console.log(state.like);\n    },\n    [onLikePost.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\nexport default movies.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}