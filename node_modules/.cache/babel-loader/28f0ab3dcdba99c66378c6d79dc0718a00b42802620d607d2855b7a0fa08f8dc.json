{"ast":null,"code":"// import { instance } from \"../../shared/api\";\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n//\n// //영화 ,극장 , 날짜 선택하고 보내고 시간받아오기\n// export const getTime = createAsyncThunk(\n//   \"booking/getTime\",\n//   async (_data, thunkAPI) => {\n//     try {\n//       const data = await instance.post(\"/auth/ticket/select\", _data);\n//       return data.data.data;\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n//\n// //시간 보내고 예매된 좌석 받아오기\n// export const choiceSeat = createAsyncThunk(\n//   \"booking/choiceSeat\",\n//   async (seatData, thunkAPI) => {\n//     try {\n//       const data = await instance.post(\"/auth/ticket/seat\", seatData);\n//       return data.data.data.seat;\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n//\n// //결제완료 티켓발급\n// export const finishPay = createAsyncThunk(\n//   \"booking/finishPay\",\n//   async (payData, thunkAPI) => {\n//     try {\n//       const data = await instance.post(\"/auth/ticket/seat/buy\", payData);\n//       console.log(data);\n//       return;\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n//\n// export const booking = createSlice({\n//   name: \"booking\",\n//   initialState: {\n//     Title: \"\",\n//     City: \"강원\",\n//     Town: \"\",\n//     Date: \"\",\n//     Time: \"\",\n//     Res: [],\n//     Seat: \"\",\n//     ReservedSeat: {},\n//     Img: \"https://ifh.cc/g/qV8mw6.png\",\n//   },\n//\n//   reducers: {\n//     //예매 영화 선택 리듀서\n//     choiceMovie: (state, action) => {\n//       state.Title = action.payload.title;\n//       state.Img = action.payload.img;\n//     },\n//     //예매 극장 선택 리듀서\n//     choiceCinema: (state, action) => {\n//       state.Town = action.payload;\n//     },\n//     //예매 날짜 선택 리듀서\n//     choiceDate: (state, action) => {\n//       state.Date = action.payload;\n//     },\n//     //예매 시간 선택 리듀서\n//     choiceTime: (state, action) => {\n//       state.Time = action.payload;\n//     },\n//     //좌석 선택 저장 리듀서\n//     checkSeat: (state, action) => {\n//       state.Seat = action.payload;\n//     },\n//   },\n//\n//   extraReducers: {\n//     [getTime.pending]: (state) => {\n//       state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n//     },\n//     [getTime.fulfilled]: (state, action) => {\n//       state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.Res = action.payload;\n//     },\n//     [getTime.rejected]: (state, action) => {\n//       state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n//     },\n//     [choiceSeat.pending]: (state) => {\n//       state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n//     },\n//     [choiceSeat.fulfilled]: (state, action) => {\n//       state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.ReservedSeat = action.payload;\n//       // console.log(action.payload)\n//     },\n//     [choiceSeat.rejected]: (state, action) => {\n//       state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n//     },\n//   },\n// });\n//\n// export const { choiceMovie, choiceCinema, choiceDate, choiceTime, checkSeat } =\n//   booking.actions;\n// export default booking.reducer;","map":{"version":3,"names":[],"sources":["C:/Users/Administrator/frontend_rock/src/redux/modules/booking.js"],"sourcesContent":["// import { instance } from \"../../shared/api\";\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n//\n// //영화 ,극장 , 날짜 선택하고 보내고 시간받아오기\n// export const getTime = createAsyncThunk(\n//   \"booking/getTime\",\n//   async (_data, thunkAPI) => {\n//     try {\n//       const data = await instance.post(\"/auth/ticket/select\", _data);\n//       return data.data.data;\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n//\n// //시간 보내고 예매된 좌석 받아오기\n// export const choiceSeat = createAsyncThunk(\n//   \"booking/choiceSeat\",\n//   async (seatData, thunkAPI) => {\n//     try {\n//       const data = await instance.post(\"/auth/ticket/seat\", seatData);\n//       return data.data.data.seat;\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n//\n// //결제완료 티켓발급\n// export const finishPay = createAsyncThunk(\n//   \"booking/finishPay\",\n//   async (payData, thunkAPI) => {\n//     try {\n//       const data = await instance.post(\"/auth/ticket/seat/buy\", payData);\n//       console.log(data);\n//       return;\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n//\n// export const booking = createSlice({\n//   name: \"booking\",\n//   initialState: {\n//     Title: \"\",\n//     City: \"강원\",\n//     Town: \"\",\n//     Date: \"\",\n//     Time: \"\",\n//     Res: [],\n//     Seat: \"\",\n//     ReservedSeat: {},\n//     Img: \"https://ifh.cc/g/qV8mw6.png\",\n//   },\n//\n//   reducers: {\n//     //예매 영화 선택 리듀서\n//     choiceMovie: (state, action) => {\n//       state.Title = action.payload.title;\n//       state.Img = action.payload.img;\n//     },\n//     //예매 극장 선택 리듀서\n//     choiceCinema: (state, action) => {\n//       state.Town = action.payload;\n//     },\n//     //예매 날짜 선택 리듀서\n//     choiceDate: (state, action) => {\n//       state.Date = action.payload;\n//     },\n//     //예매 시간 선택 리듀서\n//     choiceTime: (state, action) => {\n//       state.Time = action.payload;\n//     },\n//     //좌석 선택 저장 리듀서\n//     checkSeat: (state, action) => {\n//       state.Seat = action.payload;\n//     },\n//   },\n//\n//   extraReducers: {\n//     [getTime.pending]: (state) => {\n//       state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n//     },\n//     [getTime.fulfilled]: (state, action) => {\n//       state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.Res = action.payload;\n//     },\n//     [getTime.rejected]: (state, action) => {\n//       state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n//     },\n//     [choiceSeat.pending]: (state) => {\n//       state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n//     },\n//     [choiceSeat.fulfilled]: (state, action) => {\n//       state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.ReservedSeat = action.payload;\n//       // console.log(action.payload)\n//     },\n//     [choiceSeat.rejected]: (state, action) => {\n//       state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n//       state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n//     },\n//   },\n// });\n//\n// export const { choiceMovie, choiceCinema, choiceDate, choiceTime, checkSeat } =\n//   booking.actions;\n// export default booking.reducer;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}