{"ast":null,"code":"import { instance } from \"../../shared/api\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n//영화 ,극장 , 날짜 선택하고 보내고 시간받아오기\nexport const getTime = createAsyncThunk(\"booking/getTime\", async (_data, thunkAPI) => {\n  try {\n    const data = await instance.post(\"/auth/ticket/select\", _data);\n    return data.data.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//시간 보내고 예매된 좌석 받아오기\nexport const choiceSeat = createAsyncThunk(\"booking/choiceSeat\", async (seatData, thunkAPI) => {\n  try {\n    const data = await instance.post(\"/auth/ticket/seat\", seatData);\n    return data.data.data.seat;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//결제완료 티켓발급\nexport const finishPay = createAsyncThunk(\"booking/finishPay\", async (payData, thunkAPI) => {\n  try {\n    const data = await instance.post(\"/auth/ticket/seat/buy\", payData);\n    console.log(data);\n    return;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const booking = createSlice({\n  name: \"booking\",\n  initialState: {\n    Title: \"\",\n    City: \"강원\",\n    Town: \"\",\n    Date: \"\",\n    Time: \"\",\n    Res: [],\n    Seat: \"\",\n    ReservedSeat: {},\n    Img: \"https://ifh.cc/g/qV8mw6.png\"\n  },\n  reducers: {\n    //예매 영화 선택 리듀서\n    choiceMovie: (state, action) => {\n      state.Title = action.payload.title;\n      state.Img = action.payload.img;\n    },\n    //예매 극장 선택 리듀서\n    choiceCinema: (state, action) => {\n      state.Town = action.payload;\n    },\n    //예매 날짜 선택 리듀서\n    choiceDate: (state, action) => {\n      state.Date = action.payload;\n    },\n    //예매 시간 선택 리듀서\n    choiceTime: (state, action) => {\n      state.Time = action.payload;\n    },\n    //좌석 선택 저장 리듀서\n    checkSeat: (state, action) => {\n      state.Seat = action.payload;\n    }\n  },\n  extraReducers: {\n    [getTime.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getTime.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.Res = action.payload;\n    },\n    [getTime.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [choiceSeat.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [choiceSeat.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.ReservedSeat = action.payload;\n      // console.log(action.payload)\n    },\n    [choiceSeat.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n});\nexport const {\n  choiceMovie,\n  choiceCinema,\n  choiceDate,\n  choiceTime,\n  checkSeat\n} = booking.actions;\nexport default booking.reducer;","map":{"version":3,"names":["instance","createSlice","createAsyncThunk","getTime","_data","thunkAPI","data","post","error","rejectWithValue","choiceSeat","seatData","seat","finishPay","payData","console","log","booking","name","initialState","Title","City","Town","Date","Time","Res","Seat","ReservedSeat","Img","reducers","choiceMovie","state","action","payload","title","img","choiceCinema","choiceDate","choiceTime","checkSeat","extraReducers","pending","isLoading","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/Administrator/frontend_rock/src/redux/modules/booking.js"],"sourcesContent":["import { instance } from \"../../shared/api\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n//영화 ,극장 , 날짜 선택하고 보내고 시간받아오기\nexport const getTime = createAsyncThunk(\n  \"booking/getTime\",\n  async (_data, thunkAPI) => {\n    try {\n      const data = await instance.post(\"/auth/ticket/select\", _data);\n      return data.data.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//시간 보내고 예매된 좌석 받아오기\nexport const choiceSeat = createAsyncThunk(\n  \"booking/choiceSeat\",\n  async (seatData, thunkAPI) => {\n    try {\n      const data = await instance.post(\"/auth/ticket/seat\", seatData);\n      return data.data.data.seat;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//결제완료 티켓발급\nexport const finishPay = createAsyncThunk(\n  \"booking/finishPay\",\n  async (payData, thunkAPI) => {\n    try {\n      const data = await instance.post(\"/auth/ticket/seat/buy\", payData);\n      console.log(data);\n      return;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const booking = createSlice({\n  name: \"booking\",\n  initialState: {\n    Title: \"\",\n    City: \"강원\",\n    Town: \"\",\n    Date: \"\",\n    Time: \"\",\n    Res: [],\n    Seat: \"\",\n    ReservedSeat: {},\n    Img: \"https://ifh.cc/g/qV8mw6.png\",\n  },\n\n  reducers: {\n    //예매 영화 선택 리듀서\n    choiceMovie: (state, action) => {\n      state.Title = action.payload.title;\n      state.Img = action.payload.img;\n    },\n    //예매 극장 선택 리듀서\n    choiceCinema: (state, action) => {\n      state.Town = action.payload;\n    },\n    //예매 날짜 선택 리듀서\n    choiceDate: (state, action) => {\n      state.Date = action.payload;\n    },\n    //예매 시간 선택 리듀서\n    choiceTime: (state, action) => {\n      state.Time = action.payload;\n    },\n    //좌석 선택 저장 리듀서\n    checkSeat: (state, action) => {\n      state.Seat = action.payload;\n    },\n  },\n\n  extraReducers: {\n    [getTime.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [getTime.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.Res = action.payload;\n    },\n    [getTime.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [choiceSeat.pending]: (state) => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [choiceSeat.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.ReservedSeat = action.payload;\n      // console.log(action.payload)\n    },\n    [choiceSeat.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n  },\n});\n\nexport const { choiceMovie, choiceCinema, choiceDate, choiceTime, checkSeat } =\n  booking.actions;\nexport default booking.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}