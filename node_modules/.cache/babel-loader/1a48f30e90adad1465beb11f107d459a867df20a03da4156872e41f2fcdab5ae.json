{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { instance } from \"../../shared/api\";\n\n//미들웨어 ----------------------------------------------------------------------------------------------\n\n//네이버 로그인     //엑스트라리듀서 안씀\nexport const getToken = createAsyncThunk(\"user/getToken\", async (code, thunkAPI) => {\n  //주소창의 code 뽑아낸걸 payload로 받음\n  try {\n    const data = await instance.get(`auth/naver?code=${code}&state=123`); //서버주소+코드정보 로 get요청을 보내면 response에 토큰을 받을수있다.\n    const ACCESS_TOKEN = data.headers.authorization;\n    localStorage.setItem(\"token\", ACCESS_TOKEN); //로컬스토리지에 토큰저장\n    window.location.assign(\"/\"); //토큰 저장하면 자동으로 메인화면으로 이동\n    window.alert(\"환영합니다!\");\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n//카카오 로그인     //엑스트라리듀서 안씀\nexport const getKakao = createAsyncThunk(\"user/getKakao\", async (code, thunkAPI) => {\n  //주소창의 code 뽑아낸걸 payload로 받음\n  try {\n    const data = await instance.get(`/auth/kakao?code=${code}`); //서버주소+코드정보 로 get요청을 보내면 response에 토큰을 받을수있다.\n    console.log(data);\n    const ACCESS_TOKEN = data.headers.authorization;\n    localStorage.setItem(\"token\", ACCESS_TOKEN); //로컬스토리지에 토큰저장\n    window.location.assign(\"/\"); //토큰 저장하면 자동으로 메인화면으로 이동\n    window.alert(\"환영합니다!\");\n    return data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error);\n  }\n});\n\n// //유저 로그아웃\n// export const _logout = createAsyncThunk(\n//   \"users/logout\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       const data = await instance.get(\"/auth/logout\");\n//       console.log(data);\n//       localStorage.removeItem(\"token\");\n//       window.alert(\"로그아웃 되었습니다.\")\n//       return thunkAPI.fulfillWithValue(data.data);\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n\n//리듀서 -----------------------------------------------------------------------------------------------------\nexport const user = createSlice({\n  name: \"user\",\n  initialState: {\n    is_Login: false,\n    error: null\n  },\n  reducers: {\n    //로그인상태확인 리듀서\n    loginCheck: state => {\n      //app.js에서 뭔가실행될때마다 항상 로컬스토리지에 토큰이 있나 없나보고 state의 is_Login상태를 바꿔줌\n      state.is_Login = true;\n    }\n  }\n});\nexport const {\n  loginCheck\n} = user.actions;\nexport default user.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","instance","getToken","code","thunkAPI","data","get","ACCESS_TOKEN","headers","authorization","localStorage","setItem","window","location","assign","alert","error","rejectWithValue","getKakao","console","log","user","name","initialState","is_Login","reducers","loginCheck","state","actions","reducer"],"sources":["C:/Users/Administrator/frontend_rock/src/redux/modules/user.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { instance } from \"../../shared/api\";\n\n//미들웨어 ----------------------------------------------------------------------------------------------\n\n//네이버 로그인     //엑스트라리듀서 안씀\nexport const getToken = createAsyncThunk(\n  \"user/getToken\",\n  async (code, thunkAPI) => {\n    //주소창의 code 뽑아낸걸 payload로 받음\n    try {\n      const data = await instance.get(`auth/naver?code=${code}&state=123`); //서버주소+코드정보 로 get요청을 보내면 response에 토큰을 받을수있다.\n      const ACCESS_TOKEN = data.headers.authorization;\n      localStorage.setItem(\"token\", ACCESS_TOKEN); //로컬스토리지에 토큰저장\n      window.location.assign(\"/\"); //토큰 저장하면 자동으로 메인화면으로 이동\n      window.alert(\"환영합니다!\");\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n//카카오 로그인     //엑스트라리듀서 안씀\nexport const getKakao = createAsyncThunk(\n  \"user/getKakao\",\n  async (code, thunkAPI) => {\n    //주소창의 code 뽑아낸걸 payload로 받음\n    try {\n      const data = await instance.get(`/auth/kakao?code=${code}`); //서버주소+코드정보 로 get요청을 보내면 response에 토큰을 받을수있다.\n      console.log(data);\n      const ACCESS_TOKEN = data.headers.authorization;\n      localStorage.setItem(\"token\", ACCESS_TOKEN); //로컬스토리지에 토큰저장\n      window.location.assign(\"/\"); //토큰 저장하면 자동으로 메인화면으로 이동\n      window.alert(\"환영합니다!\");\n      return data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\n// //유저 로그아웃\n// export const _logout = createAsyncThunk(\n//   \"users/logout\",\n//   async (payload, thunkAPI) => {\n//     try {\n//       const data = await instance.get(\"/auth/logout\");\n//       console.log(data);\n//       localStorage.removeItem(\"token\");\n//       window.alert(\"로그아웃 되었습니다.\")\n//       return thunkAPI.fulfillWithValue(data.data);\n//     } catch (error) {\n//       return thunkAPI.rejectWithValue(error);\n//     }\n//   }\n// );\n\n//리듀서 -----------------------------------------------------------------------------------------------------\nexport const user = createSlice({\n  name: \"user\",\n  initialState: {\n    is_Login: false,\n    error: null,\n  },\n  reducers: {\n    //로그인상태확인 리듀서\n    loginCheck: (state) => {\n      //app.js에서 뭔가실행될때마다 항상 로컬스토리지에 토큰이 있나 없나보고 state의 is_Login상태를 바꿔줌\n      state.is_Login = true;\n    },\n  },\n});\n\nexport const { loginCheck } = user.actions;\nexport default user.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,QAAQ,kBAAkB;;AAE3C;;AAEA;AACA,OAAO,MAAMC,QAAQ,GAAGF,gBAAgB,CACtC,eAAe,EACf,OAAOG,IAAI,EAAEC,QAAQ,KAAK;EACxB;EACA,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,GAAG,CAAC,mBAAmBH,IAAI,YAAY,CAAC,CAAC,CAAC;IACtE,MAAMI,YAAY,GAAGF,IAAI,CAACG,OAAO,CAACC,aAAa;IAC/CC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,YAAY,CAAC,CAAC,CAAC;IAC7CK,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7BF,MAAM,CAACG,KAAK,CAAC,QAAQ,CAAC;IACtB,OAAOV,IAAI;EACb,CAAC,CAAC,OAAOW,KAAK,EAAE;IACd,OAAOZ,QAAQ,CAACa,eAAe,CAACD,KAAK,CAAC;EACxC;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAME,QAAQ,GAAGlB,gBAAgB,CACtC,eAAe,EACf,OAAOG,IAAI,EAAEC,QAAQ,KAAK;EACxB;EACA,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,GAAG,CAAC,oBAAoBH,IAAI,EAAE,CAAC,CAAC,CAAC;IAC7DgB,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;IACjB,MAAME,YAAY,GAAGF,IAAI,CAACG,OAAO,CAACC,aAAa;IAC/CC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,YAAY,CAAC,CAAC,CAAC;IAC7CK,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7BF,MAAM,CAACG,KAAK,CAAC,QAAQ,CAAC;IACtB,OAAOV,IAAI;EACb,CAAC,CAAC,OAAOW,KAAK,EAAE;IACd,OAAOZ,QAAQ,CAACa,eAAe,CAACD,KAAK,CAAC;EACxC;AACF,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMK,IAAI,GAAGtB,WAAW,CAAC;EAC9BuB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,QAAQ,EAAE,KAAK;IACfR,KAAK,EAAE;EACT,CAAC;EACDS,QAAQ,EAAE;IACR;IACAC,UAAU,EAAGC,KAAK,IAAK;MACrB;MACAA,KAAK,CAACH,QAAQ,GAAG,IAAI;IACvB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE;AAAW,CAAC,GAAGL,IAAI,CAACO,OAAO;AAC1C,eAAeP,IAAI,CAACQ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}